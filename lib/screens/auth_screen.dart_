import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class AuthScreen extends StatefulWidget {
  @override
  _AuthScreenState createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _tokenController = TextEditingController(); // メール確認コード用

  bool _isLoading = false;
  String _errorMessage = '';
  bool _isEmailConfirmed = false; // メール確認済みかどうか

  final supabase = Supabase.instance.client;

  // 新規登録（メール & パスワード）
  Future<void> _signUp() async {
    if (_emailController.text.isEmpty || _passwordController.text.isEmpty) {
      setState(() => _errorMessage = "メールアドレスとパスワードを入力してください");
      return;
    }

    setState(() => _isLoading = true);

    final email = _emailController.text.trim();
    final password = _passwordController.text.trim();
    try {
      final response = await Supabase.instance.client.auth.signUp(
        email: email,
        password: password,
      );

      // 登録されているメールアドレスの場合、identitiesが空の配列になる
      final identities = response.user?.identities;
      print('identitiesの確認：$identities');
      if (identities?.isEmpty ?? true) {
        setState(() => _errorMessage = "既に登録済みのユーザーです。");
        return;
      } else {
        setState(() => _errorMessage = "");
      }
      if (response.error != null) {
          String errorMessage = _getFriendlyErrorMessage(
              response.error!.message);
          setState(() => _errorMessage = errorMessage);
        }
    } catch (e) {
      setState(() => _errorMessage = "サインアップに失敗しました。もう一度お試しください。$e");
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ログイン（メール & パスワード）
  Future<void> _signIn() async {
    if (_emailController.text.isEmpty || _passwordController.text.isEmpty) {
      setState(() => _errorMessage = "メールアドレスとパスワードを入力してください");
      return;
    }

    setState(() => _isLoading = true);

    try {
      final response = await Supabase.instance.client.auth.signInWithPassword(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
      );

      if (response.error != null) {
        String errorMessage = _getFriendlyErrorMessage(response.error!.message);
        setState(() => _errorMessage = errorMessage);
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMessage)),
        );
      } else if (response.user != null) {
        setState(() => _errorMessage = '');
        print("✅ ログイン成功: ${response.user!.id}");
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("ログイン成功")),
        );
        Navigator.pushReplacementNamed(context, '/home');
      }
    } catch (e) {
      setState(() => _errorMessage = "ログインに失敗しました。もう一度お試しください。");
    } finally {
      setState(() => _isLoading = false);
    }
  }

  String _getFriendlyErrorMessage(String errorCode) {
    // エラーコードを小文字に統一
    errorCode = errorCode.toLowerCase();

    if (errorCode.contains("invalid_credentials")) {
      return "メールアドレスまたはパスワードが間違っています。";
    } else if (errorCode.contains("email_not_confirmed")) {
      return "メールアドレスが確認されていません。確認メールをチェックしてください。";
    } else if (errorCode.contains("user_not_found")) {
      return "このメールアドレスのアカウントは存在しません。";
    } else if (errorCode.contains("password_too_short") || errorCode.contains("weak_password")) {
      return "パスワードは8文字以上で入力してください。";
    } else if (errorCode.contains("network_error") || errorCode.contains("timeout")) {
      return "ネットワークエラーが発生しました。接続を確認してください。";
    } else if (errorCode.contains("email_already_in_use") || errorCode.contains("user_already_exists")) {
      return "このメールアドレスはすでに使用されています。";
    } else if (errorCode.contains("invalid_email")) {
      return "無効なメールアドレスです。正しい形式で入力してください。";
    } else if (errorCode.contains("token_expired")) {
      return "確認コードの有効期限が切れています。再度メールを送信してください。";
    } else if (errorCode.contains("invalid_token")) {
      return "無効な確認コードです。正しいコードを入力してください。";
    } else if (errorCode.contains("session_expired")) {
      return "セッションが期限切れです。再度ログインしてください。";
    } else if (errorCode.contains("operation_not_allowed")) {
      return "この操作は許可されていません。";
    } else {
      return "エラーが発生しました。もう一度お試しください。";
    }
  }


  //メール確認（確認コードをアプリ内で入力）
  Future<void> _confirmEmail() async {
    if (_emailController.text.isEmpty || _tokenController.text.isEmpty) {
      setState(() => _errorMessage = "メールアドレスと確認コードを入力してください");
      return;
    }

    setState(() => _isLoading = true);

    try {
      final response = await supabase.auth.verifyOTP(
        type: OtpType.email,
        email: _emailController.text.trim(),
        token: _tokenController.text.trim(),
      );

      if (response.error != null) {
        String errorMessage = _getFriendlyErrorMessage(response.error!.message);
        setState(() => _errorMessage = errorMessage);
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMessage)),
        );
      } else {
        setState(() => _errorMessage = '');
        print("✅ メール確認成功");
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("メール確認が完了しました！ログインしてください")),
        );
        setState(() => _isEmailConfirmed = true);
      }
    } catch (e) {
      setState(() => _errorMessage = "メール確認に失敗しました。もう一度お試しください。");
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // 確認メールを再送信
  Future<void> _resendConfirmationEmail() async {
    final email = _emailController.text.trim();
    if (email.isEmpty) {
      setState(() => _errorMessage = "メールアドレスを入力してください");
      return;
    }

    try {
      final response = await supabase.auth.resend(
        type: OtpType.signup,
        email: email,
      );

      if (response.error == null) {
        setState(() => _errorMessage = '');
        print("確認メールを再送信しました");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("確認メールを再送しました。受信トレイを確認してください")),
        );
      } else {
        // エラー内容の確認
        print("エラー内容: ${response.error?.message}");
        if (response.error?.message == "over_email_send_rate_limit") {
          setState(() => _errorMessage = "確認メールの送信制限を超えました。少し時間をおいて再度お試しください。");
        } else {
          setState(() => _errorMessage = response.error?.message ?? "エラーが発生しました");
        }
      }
    } catch (e) {
      setState(() => _errorMessage = e.toString());
      print('catch内emailの確認：  $email');
      print('catch内エラー内容の確認：  $_errorMessage');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("ログイン / サインアップ")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: _emailController,
              decoration: InputDecoration(labelText: "メールアドレス"),
              keyboardType: TextInputType.emailAddress,
            ),
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(labelText: "パスワード(8文字以上)"),
              obscureText: true,
            ),
            SizedBox(height: 20),

            /// エラーメッセージを表示
            if (_errorMessage.isNotEmpty)
              Text(_errorMessage, style: TextStyle(color: Colors.red)),

            if (_isLoading)
              CircularProgressIndicator()
            else ...[
              ElevatedButton(
                onPressed: _signIn,
                child: Text("ログイン"),
              ),
              ElevatedButton(
                onPressed: _signUp,
                child: Text("新規登録"),
              ),
              ElevatedButton(
                onPressed: _resendConfirmationEmail,
                child: Text("確認メールを再送"),
              ),

              SizedBox(height: 20),
              Text("メールで受信したコードを入力してください"),
              TextField(
                controller: _tokenController,
                decoration: InputDecoration(labelText: "確認コード入力"),
              ),
              ElevatedButton(
                onPressed: _confirmEmail,
                child: Text("コードを確認"),
              ),
            ],
          ],
        ),
      ),
    );
  }
}

extension on ResendResponse {
  get error => null;
}

extension on AuthResponse {
  get error => null;
}
